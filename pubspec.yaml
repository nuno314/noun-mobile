name: emotee
description: A new Flutter project.
# The following line prevents the package from being accidentally published to
# pub.dev using `flutter pub publish`. This is preferred for private packages.
publish_to: "none" # Remove this line if you wish to publish to pub.dev

# The following defines the version and build number for your application.
# A version number is three numbers separated by dots, like 1.2.43
# followed by an optional build number separated by a +.
# Both the version and the builder number may be overridden in flutter
# build by specifying --build-name and --build-number, respectively.
# In Android, build-name is used as versionName while build-number used as versionCode.
# Read more about Android versioning at https://developer.android.com/studio/publish/versioning
# In iOS, build-name is used as CFBundleShortVersionString while build-number is used as CFBundleVersion.
# Read more about iOS versioning at
# https://developer.apple.com/library/archive/documentation/General/Reference/InfoPlistKeyReference/Articles/CoreFoundationKeys.html
# In Windows, build-name is used as the major, minor, and patch parts
# of the product and file versions while build-number is used as the build suffix.
version: 1.0.0+1

environment:
  sdk: ">=3.0.5 <4.0.0"

# Dependencies specify other packages that your package needs in order to work.
# To automatically upgrade your package dependencies to the latest versions
# consider running `flutter pub upgrade --major-versions`. Alternatively,
# dependencies can be manually updated by changing the version numbers below to
# the latest version available on pub.dev. To see which dependencies have newer
# versions available, run `flutter pub outdated`.
dependencies:
  flutter:
    sdk: flutter

  # A package for creating badges. Badges can be used for an additional marker for any widget, e.g. show a number of items in a shopping cart.
  badges: ^3.1.2

  # Immutable collections based on the SDK collections. Each SDK collection class is split into a new immutable collection class and a corresponding mutable builder class.
  built_collection: ^5.1.1

  # Flutter library to load and cache network images. Can also be used with placeholder and error widgets.
  cached_network_image: ^3.3.1

  # Flutter plugin for Cloud Firestore, a cloud-hosted, noSQL database with live synchronization and offline support on Android and iOS.
  cloud_firestore: ^5.2.1

  # Collections and utilities functions and classes related to collections.
  collection: ^1.17.2

  # Flutter plugin for discovering the state of the network (WiFi & mobile/cellular) connectivity on Android and iOS.
  connectivity_plus: ^5.0.2

  # The following adds the Cupertino Icons font to your application.Use with the CupertinoIcons class for iOS style icons.
  cupertino_icons: ^1.0.2

  # A simple API to format dates. Provides various constants to build Date format string. Use `formatDate` method to format date according to format string.
  date_format: ^2.0.7

  # Superpowers for Dart. Collection of useful static extension methods.
  dartx: ^1.2.0

  # Flutter plugin providing detailed information about the device (make, model, etc.), and Android or iOS version the app is running on.
  device_info_plus: ^9.1.1

  # A powerful HTTP networking package, supports Interceptors, Aborting and canceling a request, Custom adapters, Transformers, etc.
  dio: ^5.4.0

  # A package that allows you to use a native file explorer to pick single or multiple absolute file paths, with extension filtering support.
  file_picker: ^6.1.1

  # Flutter plugin for Firebase Auth, enabling authentication using passwords, phone numbers and identity providers like Google, Facebook and Twitter.
  firebase_auth: ^5.1.4

  # Flutter plugin for Firebase Core, enabling connecting to multiple Firebase apps.
  firebase_core: ^3.3.0

  # Flutter Widgets that make it easy to implement the BLoC (Business Logic Component) design pattern. Built to be used with the bloc state management package.
  flutter_bloc: ^8.1.3

  # A clean and lightweight loading/toast widget for Flutter, Easy to use without context, Support iOS、Android and Web
  flutter_easyloading: ^3.0.5

  # Flutter Localization is a package use for in-app localization with map data. More easier and faster to implement and inspired by the flutter_localizations itself.
  flutter_localizations:
    sdk: flutter

  # A package of formatters for international phone numbers, credit / debit cards and a masked formatter
  flutter_multi_formatter: ^2.12.4

  # A flutter plugin for adapting screen and font size.Guaranteed to look good on different models
  flutter_screenutil: ^5.9.0

  # A package can help you to change your flutter app's statusbar's color or navigationbar's color programmatically.
  flutter_statusbarcolor_ns: ^0.5.0

  # An SVG rendering and widget library for Flutter, which allows painting and displaying Scalable Vector Graphics 1.1 files.
  flutter_svg: ^2.0.9

  # Toast Library for Flutter, Easily create toast messages in single line of code
  fluttertoast: ^8.2.4

  # Simple direct Service Locator that allows to decouple the interface from a concrete implementation and to access the concrete implementation from everywhere in your App
  get_it: ^7.6.7

  # A command-line tool that simplifies the task of updating your Flutter app's launcher icon.
  icons_launcher: ^2.1.7

  # Injectable is a convenient code generator for get_it. Inspired by Angular DI, Guice DI and inject.dart.
  injectable: ^2.3.2

  # Contains code to deal with internationalized/localized messages, date and number formatting and parsing, bi-directional text, and other internationalization issues.
  intl: any

  # Classes and helper functions that support JSON code generation via the `json_serializable` package.
  json_annotation: ^4.8.1

  # Small, easy to use and extensible logger which prints beautiful logs.
  logger: ^2.0.2+1

  # Flutter plugin for querying information about the application package, such as CFBundleVersion on iOS or versionCode on Android.
  package_info_plus: ^4.2.0

  # Permission plugin for Flutter. This plugin provides a cross-platform (iOS, Android) API to request and check permissions.
  permission_handler: ^11.0.1

  # Dart library for parsing phone numbers. Inspired by Google's libphonenumber and PhoneNumberKit for ios.
  phone_numbers_parser: ^8.1.0

  # a widget provided to the flutter scroll component drop-down refresh and pull up load.
  pull_to_refresh: ^2.0.0

  # An dio client generator using source_gen and inspired by Chopper and Retrofit.
  retrofit: ^4.0.3

  # Flutter plugin for reading and writing simple key-value pairs. Wraps NSUserDefaults on iOS and SharedPreferences on Android.
  shared_preferences: ^2.2.2

  # A library useful for creating fuzzy timestamps. (e.g. "15 minutes ago")
  timeago: ^3.6.1

dev_dependencies:
  # A build system for Dart code generation and modular compilation.
  build_runner: ^2.4.8

  flutter_test:
    sdk: flutter

  # # A package which simplifies the task of updating your Flutter app's launcher icon.
  # flutter_launcher_icons: ^0.13.1

  # The "flutter_lints" package below contains a set of recommended lints to
  # encourage good coding practices. The lint set provided by the package is
  # activated in the `analysis_options.yaml` file located at the root of your
  # package. See that file for information about deactivating specific lint
  # rules and activating additional ones.
  flutter_lints: ^2.0.0

  # Injectable is a convenient code generator for get_it. Inspired by Angular DI, Guice DI and inject.dart.
  injectable_generator: ^2.4.1

  # Automatically generate code for converting to and from JSON by annotating Dart classes.
  json_serializable: ^6.7.1

  module_generator:
    path: ./tools/module_generator

  retrofit_generator: ^8.0.4

# For information on the generic Dart part of this file, see the
# following page: https://dart.dev/tools/pub/pubspec

flutter_gen:
  output: lib/gen/
  integrations:
    flutter_svg: true

# The following section is specific to Flutter packages.
flutter:
  # The following line ensures that the Material Icons font is
  # included with your application, so that you can use the icons in
  # the material Icons class.
  uses-material-design: true

  generate: true

  # To add assets to your application, add an assets section, like this:
  assets:
    - assets/images/
    - assets/svg/
  fonts:
    - family: Montserrat
      fonts:
        # Light
        - asset: assets/fonts/Montserrat-Light.ttf
          style: normal
          weight: 300
        - asset: assets/fonts/Montserrat-LightItalic.ttf
          style: italic
          weight: 300

        # Regular
        - asset: assets/fonts/Montserrat-Regular.ttf
          style: normal
          weight: 400

        # MediumBold
        - asset: assets/fonts/Montserrat-Medium.ttf
          style: normal
          weight: 500
        - asset: assets/fonts/Montserrat-MediumItalic.ttf
          style: italic
          weight: 500

        # SemiBold
        - asset: assets/fonts/Montserrat-Semibold.ttf
          style: normal
          weight: 600
        - asset: assets/fonts/Montserrat-SemiboldItalic.ttf
          style: italic
          weight: 600

        # Bold
        - asset: assets/fonts/Montserrat-Bold.ttf
          style: normal
          weight: 700
        - asset: assets/fonts/Montserrat-BoldItalic.ttf
          style: italic
          weight: 700
